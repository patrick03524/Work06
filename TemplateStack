#include <iostream>
#include <vector.h>

using namespace std;

template <class T> class Stack;

template<class T>
Stack<T> operator+(const Stack<T> &stk1, const Stack<T> &stk2);
{
    Stack<T> result = stk1;
    for (unsigned i=0; i<stk1.items.size(); ++i)
    {
        result.items.push_back(stk2.items[i]);
    }
    return result;
}

template <class T>
class Stack
{
    friend Stack<T> operator+<>(const Stack<T> &stk1, const Stack<T> &stk2);
    vector<T> items;
public:
    bool empty()const
    {
        return items.empty();
    }
    void push(const T &item){items.push_back(item);}
    T pop()
    {
        T last = items.back();
        items.pop_back();
        return last;
    }
};
template<class T>
Stack<T> operator+(const Stack<T> &stk1, const Stack<T> &stk2)
{
    Stack<T> result = stk1;
    for (unsigned i=0; i<stk1.items.size();++i)
    {
        result.items.push_back(stk2.items[i]);
    }
    return result;
}
